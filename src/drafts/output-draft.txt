import React, { Component } from "react";
import jsPDF from "jspdf";

console.clear()

interface BoilerplateState {
  state: {}
}

export class Boilerplate extends Component<any, BoilerplateState> {
  public constructor(props: any) {
    super(props);
    this.state = {
      state: {}
    }
  }
  render() {
    return (
      <div>

      </div>
    )
  }
}

const data = {
  firstName: 'john',
  lastName: 'donohue',
  email: 'john.donohue@trendcycle.co',
}

interface PdfState {
  state: {}
}

export class Pdf extends Component<any, PdfState>{

  public doc = new jsPDF();

  public constructor(props: any) {
    super(props);
    this.state = {
      state: {}
    }
  }
  componentDidMount() {
    this.setup()
  }
  download = (event: any) => {
    this.doc.save('sample.pdf')
  }

  setup() {
    const el = document.getElementById('content')
    if (typeof (el) === 'object' && el !== null) {
      const width = 170
      const elementHandlers = {
        '#ignorePDF': (element:any, renderer:any) => {
          return true
        }
      }
      this.doc.fromHTML(el, 15, 15, { width, elementHandlers }, () => {
        const pdf = this.doc.output('datauristring')
        if (typeof (pdf) === 'string' && pdf.length > 0) {
          this.setState({ state:pdf })
        }
      })
    }
    this.doc = this.doc;
  }
  renderPreview() {
    const  pdf  = this.state.state;
    if (typeof (pdf) === 'string' && pdf.length > 0) {
      return (
        <div style={{
          height: '650px',
          position: 'relative',
          zIndex: 999,
          border: '1px solid #000',
        }}>
          <embed className="pdfobject" src={pdf} type="application/pdf" style={{
            overflow: 'auto',
            width: '100%',
            height: '100%',
          }} id="30"></embed>
          {/*
            <iframe title="preview" src={pdf} style={{
                width: '100%',
                height: '700px',
              }} frameBorder="0"></iframe>
          */}
        </div>
      )
    }
    return null
  }
  renderData() {
    const keys = Object.keys(data)
    return (
      <div className="row">
        {
          keys.map((e, i) => (
            <div className="col">
              <label>{e}</label>
              <div className="data">ss</div>
            </div>
          ))
        }
      </div>
    )
  }
  render() {
    return (
      <div className="container">
        <h1>ReactJS: jsPDF</h1>

        <div className="row">
          <div className="col-6">
            <div className="mb-3">
              <button className="btn btn-outline-primary" onClick={this.download}>Save as PDF</button>
            </div>
            <div id="content">
              <h2>Title</h2>
              <p className="lead">Lead</p>
              {this.renderData()}
            </div>
          </div>
          <div className="col-6">
            {this.renderPreview()}
          </div>
        </div>
      </div>
    )
  }
}


import React, { Component } from "react";
import { Unsubscribe } from "redux";
import { PlantModel } from "../../models/plantModel";
import { ActionType } from "../../redux/actionType";
import { store } from "../../redux/store";
import { ToxinsIcons } from "../toxins-icons/toxins-icons";
import "./cart.css";
import jsPDF from "jspdf";
import { Pdf } from "../pdf/pdf";

interface BoilerplateState {
  state: {}
}

export class Boilerplate extends Component<any, BoilerplateState> {
  public constructor(props: any) {
    super(props);
    this.state = {
      state: {}
    }
  }
  render() {
    return (
      <div>

      </div>
    )
  }
}

interface cartState {
  shoppingCart: PlantModel[];
  state: {}
}

const data = {
  firstName: 'john',
  lastName: 'donohue',
  email: 'john.donohue@trendcycle.co',
}

export class Cart extends Component<any, cartState> {
  private unsubscribeStore: Unsubscribe;
  public cartRef = React.createRef<HTMLElement>();
  public doc = new jsPDF();


  public constructor(props: any) {
    super(props);
    this.state = {
      shoppingCart: store.getState().shoppingCart,
      state: {}
    };
    this.unsubscribeStore = store.subscribe(() => {
      const shoppingCart = store.getState().shoppingCart;
      this.setState({ shoppingCart });
    });
  }

  public componentDidMount() {
    this.unsubscribeStore = store.subscribe(() => {
      const shoppingCart = store.getState().shoppingCart;
      this.setState({ shoppingCart });
    });

    this.setup()

  }


  public componentWillUnmount(): void {
    this.unsubscribeStore();
  }

  download = (event: any) => {
    this.doc.save('sample.pdf')
  }

  setup() {
    const el = document.getElementById('content')
    if (typeof (el) === 'object' && el !== null) {
      const width = 170
      const elementHandlers = {
        '#ignorePDF': (element: any, renderer: any) => {
          return true
        }
      }
      this.doc.fromHTML(el, 15, 15, { width, elementHandlers }, () => {
        const pdf = this.doc.output('datauristring')
        if (typeof (pdf) === 'string' && pdf.length > 0) {
          this.setState({ state: pdf })
        }
      })
    }
    this.doc = this.doc;
    console.log(this.state.state);
  }
  // renderPreview() {
  //   const pdf = this.state.state;
  //   if (typeof (pdf) === 'string' && pdf.length > 0) {
  //     return (
  //       <div style={{
  //         height: '650px',
  //         position: 'relative',
  //         zIndex: 999,
  //         border: '1px solid #000',
  //       }}>
  //         <embed className="pdfobject" src={pdf} type="application/pdf" style={{
  //           overflow: 'auto',
  //           width: '100%',
  //           height: '100%',
  //         }} id="30"></embed>
  //         {/*
  //           <iframe title="preview" src={pdf} style={{
  //               width: '100%',
  //               height: '700px',
  //             }} frameBorder="0"></iframe>
  //         */}
  //       </div>
  //     )
  //   }
  //   return null
  // }
  // renderData() {
  //   return (
  //     <main>
  //       {this.state.shoppingCart.map((p) => (
  //         <div className="cart-item">
  //           <div className="left-area-on-item">
  //             <img className="trash-icon" src="./assets/images/TRASH_1.svg" />
  //             <div className="plant-img"></div>
  //           </div>
  //           <div className="right-area-on-item">
  //             <span className="item-title"> {p.hebTitle}</span>
  //             {/* <span className="price">{p.price}</span> */}
  //             {/* <span className="amount">{p.amountOnShoppingCart}x</span> */}
  //             <div className="toxins-on-item">
  //               <ToxinsIcons plant={p} />
  //             </div>
  //             <span className="size-item">{p.size}</span>
  //             <span className="code-item">{p.code}</span>
  //             <span className="bold-txt">הולך עם:</span>
  //             <div className="best-goes-items">
  //               <div className="item"></div>
  //               <div className="item"></div>
  //               <div className="item"></div>
  //             </div>
  //           </div>
  //         </div>
  //       ))}
  //     </main>
  //   )
  // }

  renderData() {
    let div = '';
    for (const s of this.state.shoppingCart) {
      div += `
        <div className="row">

          <div className="col">
            <label>${s.hebTitle}</label>
            <div className="data">${s.hebContent}</div>
          </div>

        </div>
      `

    }
    console.log(div);
    return div;
  }

  public jsPdfGenerator = () => {
    const doc = new jsPDF("p", "pt");

    const el = this.cartRef.current;
    if (typeof (el) === 'object' && el !== null) {
      const width = 170;
      const elementHandlers = {
        '#ignorePDF': (element: any, renderer: any) => {
          return true
        }
      }
      doc.fromHTML(el, 15, 15, { width, elementHandlers }, () => {
        const pdf = doc.output('datauristring')
        if (typeof (pdf) === 'string' && pdf.length > 0) {
          doc.save(".pdf");

        }
      })
    }

  };




  public render() {
    return (
      <div className="cart">
        <div className="row">
          <div className="col-6">
            <div className="mb-3">
            </div>
            <div id="content" dangerouslySetInnerHTML={{ __html: this.renderData() }}>
            </div>
          </div>
          <div className="col-6">
            {/* {this.renderPreview()} */}
          </div>
        </div>
        <header>
          <span className="header-title">רשימת הצמחים שלי</span>
          <img className="ikea-logo" src="./assets/images/IKEA_LOGO.svg" />
          <img className="close-cart-icon" src="./assets/images/CLOSE_BT.svg" onClick={() => store.dispatch({ type: ActionType.changeDisplayForCart })} />
        </header>
        <main className="content" ref={this.cartRef}>
          {this.state.shoppingCart.length === 0 && (
            <div className="empty-cart">
              <span>עגלת הקניות שלך ריקה כרגע</span>
            </div>
          )}
          {this.state.shoppingCart.map((p) => (
            <div className="cart-item">
              <div className="left-area-on-item">
                <img className="trash-icon" src="./assets/images/TRASH_1.svg" />
                <div className="plant-img"></div>
              </div>
              <div className="right-area-on-item">
                <span className="item-title"> {p.hebTitle}</span>
                {/* <span className="price">{p.price}</span> */}
                {/* <span className="amount">{p.amountOnShoppingCart}x</span> */}
                <div className="toxins-on-item">
                  <ToxinsIcons plant={p} />
                </div>
                <span className="size-item">{p.size}</span>
                <span className="code-item">{p.code}</span>
                <span className="bold-txt">הולך עם:</span>
                <div className="best-goes-items">
                  <div className="item"></div>
                  <div className="item"></div>
                  <div className="item"></div>
                </div>
              </div>
            </div>
          ))}
        </main>
        <footer>
          <button onClick={this.download} className="download-btn">
            <img className="dowloand-icon" src="./assets/images/DOWNLOAD_ICON.svg" />הורד רשימה
          </button>
          <button className="share-btn"> <img className="share-icon" src="./assets/images/SHARE_ICON.svg" /> שתף</button>
        </footer>
      </div>
    );
  }
}
