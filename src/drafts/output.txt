import { position } from "html2canvas/dist/types/css/property-descriptors/position";
import React, { Component } from "react";
import { Unsubscribe } from "redux";
import { OutputModel } from "../../models/outputModel";
import { PlantModel } from "../../models/plantModel";
import { QuestionModel } from "../../models/questionModel";
import { ToxinModel } from "../../models/toxinModel";
import { ActionType } from "../../redux/actionType";
import { store } from "../../redux/store";
import { ToxinsIcons } from "../toxins-icons/toxins-icons";
import "./output.css";

interface OutputState {
  output: OutputModel;
  currentQuestion: QuestionModel;
  plants: PlantModel[];
  currentPlant: PlantModel;
  nextPlant: PlantModel;
  allToxins: ToxinModel[];
  classes: { current: string; next: string };
}

export class Output extends Component<any, OutputState> {
  private unsubscribeStore: Unsubscribe;

  public constructor(props: any) {
    super(props);
    this.state = {
      output: new OutputModel(),
      currentQuestion: store.getState().currentQuestion,
      plants: [],
      currentPlant: new PlantModel(),
      nextPlant: new PlantModel(),
      allToxins: [],
      classes: { current: "", next: "" },
    };

    this.unsubscribeStore = store.subscribe(() => {
      const currentQuestion = store.getState().currentQuestion;
      this.setState({ currentQuestion });
    });
  }

  public async componentDidMount() {
    try {
      this.unsubscribeStore = store.subscribe(() => {
        const currentQuestion = store.getState().currentQuestion;
        this.setState({ currentQuestion });
      });
      const allOutputs: OutputModel[] = store.getState().allOutputs;
      const output: OutputModel = allOutputs.find(
        (o) => o.id === this.state.currentQuestion.outputId
      ) as OutputModel;
      this.setState({ output });

      const allPlants: PlantModel[] = await store.getState().allPlants;
      const plants = [];
      for (const id of output.plantsIds as []) {
        for (const p of allPlants) {
          if (p.id === id) {
            plants.push(p);
          }
        }
      }

      this.setState({ plants });
      this.setState({ currentPlant: plants[0] });
      this.setState({ nextPlant: plants[1] });
    } catch (err) {
      console.log(err.message);
    }
  }

  public componentWillUnmount(): void {
    this.unsubscribeStore();
  }

  public keepOnSurvey = () => {
    store.dispatch({ type: ActionType.changeDisplay, payLoad: "question" });
    store.dispatch({
      type: ActionType.updateCurrentQuestion,
      payLoad: this.state.currentQuestion.index
        ? this.state.currentQuestion.index + 1
        : "",
    });
  };

  //Disabled button if no plant was choosen
  public isUserChoosePlant = () => {
    const shoppingCart = store.getState().shoppingCart;
    const plants = [...this.state.plants];
    let isChoose = false;
    for (const plant of plants) {
      for (const plantOnCart of shoppingCart) {
        if (plant.id === plantOnCart.id) {
          isChoose = true;
        }
      }
    }
    return isChoose;
  }

  public moveToNextPlant = () => {
    const plants = this.state.plants;
    const index = plants.findIndex((p) => p.id === this.state.currentPlant.id);
      this.setState({ nextPlant: this.state.currentPlant });
      const currentPlant = plants[index + 1];
      this.setState({ currentPlant });

      const classes = { ...this.state.classes };
      classes.current = "slide-left";
      classes.next = "slide-left";
      this.setState({ classes });
      setTimeout(() => {
        const classes = { ...this.state.classes };
        classes.current = "";
        classes.next = "";
        this.setState({ classes });
      }, 1000);
    
  };

  public moveToPrePlant = () => {
    const plants = this.state.plants;
    const index = plants.findIndex((p) => p.id === this.state.currentPlant.id);
      const classes = { ...this.state.classes };
      classes.current = "slide-right";
      classes.next = "slide-right";
      this.setState({ classes });

      this.setState({ nextPlant: this.state.currentPlant });
      const currentPlant = plants[index - 1];
      this.setState({ currentPlant });

      setTimeout(() => {
        const classes = { ...this.state.classes };
        classes.current = "";
        classes.next = "";
        this.setState({ classes });
      }, 1000);
  };

  public addPlantToWishlist = () => {
    store.dispatch({
      type: ActionType.addPlantToShoppingCart,
      payLoad: this.state.currentPlant,
    });
  };

  public isOnShoppingCart = () => {
    const shoppingCart: PlantModel[] = store.getState().shoppingCart;
    const plant = shoppingCart.find((s) => s.id === this.state.currentPlant.id);
    if (plant) {
      return true;
    }
    return false;
  };

  public isOnLastQuestion = () => {
    const allQuestionsLength = store.getState().allQuestions.length;
    const currentQuestion = { ...this.state.currentQuestion };
    if (currentQuestion?.index as number === allQuestionsLength) {
      return true;
    }

    return false;
  }

  public render() {
    return (
      <div className="output">
        <div className="plants">
          <div className={"current-plant " + this.state.classes.current}>
            <div className="top-plant-area">
              {this.state.plants.findIndex(
                (p) => p.id == this.state.currentPlant.id
              ) !==
                this.state.plants.length - 1 && (
                  <img
                    className="next-btn"
                    src="./assets/images/arrow.svg"
                    onClick={this.moveToNextPlant}
                  />
                )}
              {this.state.plants.findIndex(
                (p) => p.id == this.state.currentPlant.id
              ) !== 0 && (
                  <img
                    className="pre-btn"
                    src="./assets/images/arrow.svg"
                    onClick={this.moveToPrePlant}
                  />
                )}
              <img className="plant-img only-mobile" src={"./assets/images/" + this.state.nextPlant?.mobileImgSrc} />
              <img className="plant-img only-desktop" src={"./assets/images/" + this.state.nextPlant?.desktopImgSrc} />

            </div>
            <div className="bottom-plant-area">
              <span className="plant-title">
                {this.state.currentPlant.hebTitle}
              </span>
              <div className="toxins-area only-mobile">
                <span>עוזר להפחית:</span>
                <ToxinsIcons size='10vw' plant={this.state.currentPlant} />
              </div>
              <div className="toxins-area only-desktop">
                <span>עוזר להפחית: </span>
                <ToxinsIcons size='2.8vw' plant={this.state.currentPlant} />
              </div>

              <span className="plant-info">
                {this.state.currentPlant.hebContent}
              </span>

              {!this.isOnLastQuestion() && <button
                className="back-to-survey-btn"
                onClick={this.keepOnSurvey}
                disabled={!this.isUserChoosePlant()}
              >
                שאלה הבאה
              </button>}
              {this.isOnLastQuestion() && <button
                className="back-to-survey-btn"
                onClick={this.keepOnSurvey}
                disabled={!this.isUserChoosePlant()}
              >
                לרשימת הצמחים שלי
              </button>}
            </div>
          </div>
          <div className={"next-plant " + this.state.classes.next}>
            <div className="top-plant-area">
              <img className="plant-img only-mobile" src={"./assets/images/" + this.state.nextPlant?.mobileImgSrc} />
              <img className="plant-img only-desktop" src={"./assets/images/" + this.state.nextPlant?.desktopImgSrc} />



            </div>
            <div className="bottom-plant-area">
              <span className="plant-title">
                {this.state.nextPlant.hebTitle}
              </span>
              <div className="toxins-area only-mobile">
                <span>עוזר להפחית:</span>
                <ToxinsIcons size='10vw' plant={this.state.currentPlant} />
              </div>
              <div className="toxins-area only-desktop">
                <span>עוזר להפחית: </span>
                <ToxinsIcons size='2.8vw' plant={this.state.currentPlant} />
              </div>

              <span className="plant-info">
                {this.state.nextPlant.hebContent}
              </span>
            </div>
          </div>
          <div className="plants-navigation">
            {this.state.plants.map((p) => (
              <div
                className={
                  this.state.currentPlant.id === p.id
                    ? "plant-dot active"
                    : "plant-dot"
                }
              ></div>
            ))}
          </div>
          {!this.isOnShoppingCart() && (
            <button
              onClick={this.addPlantToWishlist}
              className="add-to-list-btn"
            >
              הוספה לרשימה
              <img className="add-icon" src="./assets/images/add.svg"/>
            </button>
          )}
          {this.isOnShoppingCart() && (
            <button
              onClick={() => store.dispatch({ type: ActionType.removeFromShoppingCart, payLoad: this.state.currentPlant.id })}
              className="on-list-btn"
            >
              &#10003; {"נשמר בהצלחה"}
            </button>
          )}

        </div>
      </div>
    );
  }
}




.mobile .current-plant.slide-right {
  animation: CurrentSlideRight 1s both;
}

.mobile .next-plant.slide-right {
  animation: NextSlideRight 1s both;
  display: block;
}

.mobile .current-plant.slide-left {
  animation: CurrentSlideLeft 1s both;
}

.mobile .next-plant.slide-left {
  animation: NextSlideLeft 1s both;
  display: block;
}

@keyframes CurrentSlideRight {
  0% {
    transform: translateX(-100vw);
  }
  100% {
    transform: translateX(0);
  }
}

@-webkit-keyframes CurrentSlideRight {
  0% {
    transform: translateX(-100vw);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes NextSlideRight {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100vw);
  }
}

@-webkit-keyframes NextSlideRight {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100vw);
  }
}

@keyframes CurrentSlideLeft {
  0% {
    transform: translateX(100vw);
  }
  100% {
    transform: translateX(0);
  }
}
@-webkit-keyframes CurrentSlideLeft {
  0% {
    transform: translateX(100vw);
  }
  100% {
    transform: translateX(0);
  }
}

@keyframes NextSlideLeft {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-100vw);
  }
}

@-webkit-keyframes NextSlideLeft {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-100vw);
  }
}





Mobile design

.mobile .output {
  height: 100%;
  width: 100%;
  overflow: hidden;
  position: absolute;
  display: flex;
  top: unset;
  left: unset;
}

.mobile .plants {
  width: 100%;
  position: relative;
  height: unset;
}

.mobile .next-btn {
  position: absolute;
  top: 50%;
  right: 0;
  transform: translateY(-50%);
  width: unset;
  left: unset;
}

.mobile .pre-btn {
  position: absolute;
  top: 50%;
  left: 0;
  transform: translateY(-50%) rotate(180deg);
  width: unset;
}

.mobile .react-multi-carousel-list {
  display: flex;
  align-items: center;
  overflow: hidden;
  position: absolute;
  z-index: 9999;
  top: 0;
  height: 100%;
  width: 100%;
}

.mobile .current-plant {
  position: relative;
  height: 100%;
  left: 0;
  width: unset;
  display: block;
}

.mobile .top-plant-area {
  position: absolute;
  top: 0;
  height: 60%;
  width: 100%;
  display: block;
  background-color: #ffdb00;
}

.mobile .plant-img {
  position: absolute;
  top: 43%;
  width: auto;
  right: 50%;
  transform: translateX(50%) translateY(-50%);
  background-color: transparent;
  border: 0;
  outline: none;
  left: unset;
  height: 78vw;
}

.mobile .back-to-survey-btn:disabled {
  border: 2px solid #0058a370;
  color: #0058a370;
}

.mobile .add-icon {
  width: 6vw;
  margin-left: 2.5vw;
}

.mobile .add-to-list-btn {
  background-color: #0058a3;
  color: white;
  width: 100%;
  position: absolute;
  bottom: 40%;
  z-index: 2;
  left: 0;
  border: 0;
  font-size: 6vw;
  height: 17vw;
  outline: none;

}

.mobile .on-list-btn {
  background-color: #16a300;
  color: white;
  width: 100%;
  position: absolute;
  bottom: 40%;
  border: none;
  z-index: 2;
  left: 0;
  font-size: 6vw;
  height: 17vw;
  outline: none;
}

.mobile .bottom-plant-area {
  position: absolute;
  bottom: 0;
  width: 92%;
  right: 50%;
  display: flex;
  height: 43%;
  flex-direction: column;
  align-items: flex-start;
  direction: rtl;
  transform: translateX(50%);
  padding: unset;
  justify-content: unset;
  font-size: unset;
  text-align: unset;
}

.mobile .plant-title {
  font-weight: 600;
  margin-top: 7vw;
  margin-bottom: 3vw;
  font-size: 6.5vw;
}

.mobile .toxins-area {
  display: flex !important;
  align-items: center;
}

.mobile .back-to-survey-btn {
  position: relative;
  width: 93%;
  border: 2px solid #0058a3;
  color: #0058a3;
  background-color: transparent;
  height: 15vw;
  font-weight: 700;
  font-size: 6vw;
  right: 50%;
  outline: none;
  top: 5vw;
  transform: translateX(50%);
  margin-top: unset;
}

.mobile .plant-info {
  text-align: right;
  margin-top: 5vw;
  font-size: 4vw;
  width: unset;
}

.mobile .next-plant {
  display: none;
  position: relative;
  height: 100%;
  bottom: 100%;
}

.mobile .toxins-area > span {
  font-size: 4.5vw;
}

.mobile .plants-navigation {
  position: absolute;
  z-index: 1;
  bottom: 52%;
  right: 50%;
  transform: translateX(50%);
  display: flex;
  justify-content: center;
  left: unset;
  align-items: center;
}

.mobile .plant-dot {
  content: "";
  background-color: #ffffff;
  height: 2vw;
  width: 2vw;
  margin: 2vw;
  border-radius: 50%;
  border: unset;
  position: relative;
}

.mobile .plant-dot.active {
  width: 3.5vw;
  height: 3.5vw;
  position: relative;
}

/*Desktop design*/

.output {
  width: 100%;
  height: 100%;
  display: flex;
  top: 0;
  left: 0;
}
.plants {
  width: 100%;
  position: absolute;
  height: 100%;
}

.current-plant {
  position: absolute;
  height: 100%;
  width: 100%;
  left: 0;
  display: flex;
}

.next-plant {
  display: none;
}

.top-plant-area {
  position: absolute;
  width: 60vw;
  background-color: #ffffff;
  height: 100%;
  display: flex;
  background-color: #ffdb00;
}

.bottom-plant-area {
  position: absolute;
  width: 28vw;
  right: 0;
  padding: 0 6vw;
  display: flex;
  flex-direction: column;
  justify-content: center;
  direction: rtl;
  height: 100%;
  align-items: flex-start;
  font-size: 1.2vw;
  text-align: right;
}

.plant-title {
  font-weight: bold;
  font-size: 1.4vw;
}

.toxins-area.only-desktop {
  display: flex !important;
  justify-content: center;
  align-items: center;
  margin-top: 1.5vw;
}

.toxins-area.only-desktop > span {
  margin-left: 1vw;
}

.plant-info {
  margin-top: 1vw;
  width: 21vw;
}

.back-to-survey-btn {
  height: 5vw;
  border: 2px solid #0058a3;
  width: 28vw;
  background-color: transparent;
  color: #0058a3;
  font-size: 1.4vw;
  margin-top: 2.5vw;
}

.back-to-survey-btn:hover {
  cursor: pointer;
}



.back-to-survey-btn:disabled {
  border: 2px solid #0058a370;
  color: #0058a370;
}

.plant-img {
  width: 20vw;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 20vw;
}

.next-btn {
  position: absolute;
  top: 50%;
  width: 4vw;
  transform: translateY(-50%);
  left: 56vw;
}

.next-btn:hover,
.pre-btn:hover {
  cursor: pointer;
}

.pre-btn {
  position: absolute;
  top: 50%;
  width: 4vw;
  transform: translateY(-50%) rotate(180deg);
  left: 0;
}


.plant-img.only-desktop{
  width: 50vw;
  position: absolute;
  top: 40%;
  transform: translateY(-50%);
  left: 7vw;
}

.plants-navigation{
  position: absolute;
  bottom: 2vw;
  display: flex;
  left: 30vw;
  transform: translateX(-50%);
  align-items: center;
  justify-content: center;
}

.plant-dot{
  height: 0.5vw;
  width: 0.5vw;
  content: "";
  background-color: white;
  border-radius: 50%;
  margin: 0.2vw;
}

.plant-dot.active{
  height: 1vw;
  width: 1vw;
}


.on-list-btn,
.add-to-list-btn{
  position: absolute;
  bottom: 6vw;
  left: 21vw;
  width: 19vw;
  height: 5vw;
  border: 0;
  outline: 0;
  color: white;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 1.4vw;
}

.add-to-list-btn{
  background-color: #0058a3;
}

.on-list-btn{
  background-color: #16a300;
}

.on-list-btn:hover,
.add-to-list-btn:hover{
  cursor: pointer;
}

.add-icon{
  width: 2vw;
  margin-left: 0.5vw;
}